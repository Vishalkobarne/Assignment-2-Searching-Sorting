# -*- coding: utf-8 -*-
"""Assignment-2: Searching & Sorting

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12hKt_xJmp05V7q7H07xIsUxmpxbNzNVo
"""

#1)Implement Binary Search
def binary_search(arr, target):
    low = 0
    high = len(arr) - 1
    
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
            
    return -1
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
target = 7

index = binary_search(arr, target)

if index == -1:
    print("Target value not found in array")
else:
    print("Target value found at index", index)

#2)Implement Merge Sort
def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    
    mid = len(arr) // 2
    left = arr[:mid]
    right = arr[mid:]
    
    left = merge_sort(left)
    right = merge_sort(right)
    
    return merge(left, right)

def merge(left, right):
    result = []
    i = 0
    j = 0
    
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
            
    result += left[i:]
    result += right[j:]
    
    return result
# Sample input list
input_list = [9, 5, 8, 3, 7, 4, 6, 2, 1]

# Sort the list using Merge Sort
sorted_list = merge_sort(input_list)

# Print the sorted list
print(sorted_list)

#3)Implement Quick Sort
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    
    return quick_sort(left) + middle + quick_sort(right)
arr = [3, 7, 1, 9, 4, 2, 6, 8, 5]
sorted_arr = quick_sort(arr)
print(sorted_arr)

#4)Implement Insertion Sort
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j+1] = arr[j]
            j -= 1
        arr[j+1] = key
    return arr
arr = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
sorted_arr = insertion_sort(arr)
print(sorted_arr)

#5)Write a program to sort list of strings (similar to that of dictionary)
def sort_strings(str_list):
    return sorted(str_list)
str_list = ["banana", "apple", "orange", "grape", "kiwi"]
sorted_list = sort_strings(str_list)
print(sorted_list)









